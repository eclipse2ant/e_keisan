　コピペ君は、まず　食品名すら教えてくれません、これが普通の栄養ソフト
なら、メニューやプルダウンで一覧が出て、そこから選べるでしょう。これは
大抵,データベースがソフトが内蔵されていて、そこから一覧の表をGUIを使っ
て出してくれるわけですね。コピペ君はそんな機能はありません、代わりに見
出しファイル、つまりnanatei.list から見出しを探します、見出しがまだな
ければ、対応する食品に見出しをつけることをします。その場合にも同じ見出
しがないように気をつけないとファイルで上側（つまり若い行）のものが優先
されてしまいます。例えば、見出し使う用語をgrep とかで検索かければその
用語を使ってる行がすべて表示されるのでそれで、分かりますよね。

  だから、ほとんど手動なんです、普通の栄養ソフトは、こういう見出しを作っ
てあるのでしょうか、それを一覧に出すわけだけど、それか、あまりも日常と
かけはなれた食品成分表の食品名で検索してるのでしょうね。さて、新しいも
のを登録するときはどうでしょう。例えば一度登録したメニューを再利用した
かったら、それ自体がデータベースに登録されてないといけません。でも先ほ
どの食品一個とちがって、そのメニューには複数の食品が対応しています。お
そらく別のテーブル（データベースの用語）は、単に計算させるだけでも存在
して、そこに記録されるでしょう。でもそれを今度は再利用するとなると、見
出しはどうでしょうか？　いろいろ考えさせられますよね。いろんな場合を想
定して、GUIのメニュー画面を作るのはかなり面倒くさそうです。だから大抵
こういう機能がついた場合は有料なソフトかあるいはWeb上のものは有料会員
のみとか。でもそれでいて使いやすかはまた別です。つまりGUIをつかうとこ
の辺の工夫の自由度は大幅に制限されてしまいます。

　コピペ君ではどうか、一度メニューをファイルに書いたら、次からは、その
ファイルを探してコピペしておしまいです。よく使うものはどこかにまとめて
おいて検索かけられるようにしておけばよいわけで、それと「退屈なことはは
Pythonにやらせよう」(Automate the Boring Work with Python) Al Sweigart
著とか、　あるいは　Rubyでの自動化　など　自由にいろんなことができます。


　つまり、なんでも好きにできます。一方普通のソフトは、GUIとデータベー
スのテーブルの設定に縛られます。大抵はSQLを使ってますから、ちょっとし
たことでも実装するのは面倒のはず。


　ここなんですね。栄養計算ソフト、多少便利でも、それでも毎回メニューづ
くりは面倒。どんどん楽したい。その楽をする可能性が、コピペ君は無限大に
あります。だから最初は手作業部分でGUIの自動化に負けますが、だんだん工
夫次第でズボラちゃんにできます。これがふつうのGUIつかった栄養ソフトに
できないので、めんどくさがり屋の私には耐えられなかったのです。
